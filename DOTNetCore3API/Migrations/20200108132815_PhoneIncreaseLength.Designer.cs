// <auto-generated />
using System;
using DOTNETCore3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DOTNetCore3API.Migrations
{
    [DbContext(typeof(BusinessPortalContext))]
    [Migration("20200108132815_PhoneIncreaseLength")]
    partial class PhoneIncreaseLength
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DOTNETCore3.Model.Entities.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("BusinessOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LastEditTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(12) CHARACTER SET utf8mb4")
                        .HasMaxLength(12);

                    b.Property<string>("Province")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("SubscriptionActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("TrialExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Zipcode")
                        .HasColumnType("varchar(8) CHARACTER SET utf8mb4")
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("DOTNETCore3.Model.Entities.BusinessCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessSize")
                        .HasColumnType("int");

                    b.Property<int>("BusinessTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StaffSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.HasIndex("BusinessTypeId")
                        .IsUnique();

                    b.ToTable("BusinessCategory");
                });

            modelBuilder.Entity("DOTNETCore3.Model.Entities.BusinessOperatingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClosingTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DayOfTheWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpeningTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessOperatingHours");
                });

            modelBuilder.Entity("DOTNETCore3.Model.Entities.BusinessOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("BusinessOwner");
                });

            modelBuilder.Entity("DOTNETCore3.Model.Entities.BusinessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("BusinessType");
                });

            modelBuilder.Entity("DOTNETCore3.Model.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("StaffFirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("StaffLastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("DOTNETCore3.Model.Entities.StaffOperatingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BusinessOperatingHoursId")
                        .HasColumnType("int");

                    b.Property<int>("DayOfTheWeek")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessOperatingHoursId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffOperatingHours");
                });

            modelBuilder.Entity("DOTNETCore3.Model.Entities.StaffShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EndingTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StaffOperatingHoursId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StaffOperatingHoursId");

                    b.ToTable("StaffShift");
                });

            modelBuilder.Entity("DOTNETCore3.Model.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Auth0UserId")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2020, 1, 8, 15, 28, 14, 956, DateTimeKind.Local).AddTicks(7640));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(60) CHARACTER SET utf8mb4")
                        .HasMaxLength(60);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(60) CHARACTER SET utf8mb4")
                        .HasMaxLength(60);

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2020, 1, 8, 15, 28, 14, 959, DateTimeKind.Local).AddTicks(8116));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(60) CHARACTER SET utf8mb4")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DOTNETCore3.Model.Entities.BusinessCategory", b =>
                {
                    b.HasOne("DOTNETCore3.Model.Entities.Business", "Business")
                        .WithOne("BusinessCategory")
                        .HasForeignKey("DOTNETCore3.Model.Entities.BusinessCategory", "BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DOTNETCore3.Model.Entities.BusinessType", "BusinessType")
                        .WithOne("BusinessCategory")
                        .HasForeignKey("DOTNETCore3.Model.Entities.BusinessCategory", "BusinessTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DOTNETCore3.Model.Entities.BusinessOperatingHours", b =>
                {
                    b.HasOne("DOTNETCore3.Model.Entities.Business", "Business")
                        .WithMany("OperatingHours")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DOTNETCore3.Model.Entities.BusinessOwner", b =>
                {
                    b.HasOne("DOTNETCore3.Model.Entities.Business", "Business")
                        .WithOne("BusinessOwner")
                        .HasForeignKey("DOTNETCore3.Model.Entities.BusinessOwner", "BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DOTNETCore3.Model.Entities.User", "User")
                        .WithOne("BusinessOwner")
                        .HasForeignKey("DOTNETCore3.Model.Entities.BusinessOwner", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DOTNETCore3.Model.Entities.Staff", b =>
                {
                    b.HasOne("DOTNETCore3.Model.Entities.Business", "Business")
                        .WithMany("Staff")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DOTNETCore3.Model.Entities.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("DOTNETCore3.Model.Entities.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DOTNETCore3.Model.Entities.StaffOperatingHours", b =>
                {
                    b.HasOne("DOTNETCore3.Model.Entities.BusinessOperatingHours", "BusinessOperatingHours")
                        .WithMany("StaffOperatingHours")
                        .HasForeignKey("BusinessOperatingHoursId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DOTNETCore3.Model.Entities.Staff", "Staff")
                        .WithMany("StaffOperatingHours")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DOTNETCore3.Model.Entities.StaffShift", b =>
                {
                    b.HasOne("DOTNETCore3.Model.Entities.Staff", "Staff")
                        .WithMany("StaffShifts")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DOTNETCore3.Model.Entities.StaffOperatingHours", "StaffOperatingHours")
                        .WithMany("StaffShifts")
                        .HasForeignKey("StaffOperatingHoursId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
